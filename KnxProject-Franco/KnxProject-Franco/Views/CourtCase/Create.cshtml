@model KnxProject_Franco.CONTRACTS.Entities.CourtCaseModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>CourtCaseModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDClient, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="IDClient" name="IDClient">
                    <option></option>
                    @foreach (var x in ViewBag.Clients)
                    {
                        <option value="@x.IDClient">@x.FirstName @x.LastName</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.IDClient, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDCurrentState, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="IDCurrentState" name="IDCurrentState">
                    <option></option>
                    @foreach (var x in ViewBag.States)
                    {
                        <option value="@x.IDState">@x.Description</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.IDCurrentState, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDCourtBranch, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="IDCourtBranch" name="IDCourtBranch">
                    <option></option>
                    @foreach (var x in ViewBag.CourtBranches)
                    {
                        if (x.IDCourtBranch == ViewBag.Lawyer.IDCourtBranch)
                        {
                            <option value="@x.IDCourtBranch">@x.Name</option>
                        }

                    }
                </select>
                @Html.ValidationMessageFor(model => model.IDCourtBranch, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDLawyer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="IDLawyer" name="IDLawyer">
                    <option></option>                    
                    <option value=@ViewBag.Lawyer.IDLawyer>@ViewBag.Lawyer.FirstName @ViewBag.Lawyer.LastName</option>                    
                </select>
                @Html.ValidationMessageFor(model => model.IDLawyer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
